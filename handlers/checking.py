import datetime
from time import sleep
from datetime import datetime, timedelta, date
from store import *
from classes.general import *
from classes.users_tasks import *
from handlers.general import *
from handlers.other.additional_funcs import *
from classes.signing_up import *
from handlers.other.config import *
from telebot.types import ReplyKeyboardRemove
from classes.errors import *
from non_public.bot import developer_id
import os
from classes.training import *
from handlers.dates_additional import *
from handlers.other.menu import *

def training_types(user=None, tariff=None):
	types = {'personal': '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ', 'split': '—Å–ø–ª–∏—Ç', 'group': '–≥—Ä—É–ø–ø–∞', 'personal_online': '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –æ–Ω–ª–∞–π–Ω', 'free': '–±–µ—Å–ø–ª–∞—Ç–Ω–æ (–ø—Ä–æ–±–Ω–æ)'}
	types_for_user = {'personal': '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ', 'split': '—Å–ø–ª–∏—Ç', 'group': '–≥—Ä—É–ø–ø–æ–≤—ã–µ', 'personal_online': '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –æ–Ω–ª–∞–π–Ω', 'free': '–±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ (–ø—Ä–æ–±–Ω—ã–µ)'}
	if user:
		sessions = user.subscription_plan['sessions_count']
		if sessions:
			result = ', '.join([' ‚Äî '.join([f'{types_for_user[i]}', str(sessions[i])]) for i in sessions if sessions[i]])
			return result
	if tariff:
		return '\n'.join([f'- _{types[i]}_: *{j}*' for i, j in tariff.sessions.items() if j])
	return types

# –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥—ã–π —á–∞—Å
def checking_every_hour(bot):
	while True:
		# ____________________________________________________________________________________________
		try:
			if datetime.now().hour == 9:
				with database() as connection:
					with connection.cursor() as db:
						db.execute(f"SELECT id FROM coachs")
						coachs_list = db.fetchall()

				if coachs_list:
					for c in coachs_list:
						try:
							coach = Coach(coach_id=c['id'])
						except:
							coach = None

						if coach:
							check_period = coach.period_check()
							if not check_period is None and check_period[1] is False and coach.status != 'indebted_coach': # –µ—Å–ª–∏ –∏—Å—Ç–µ–∫ –ø–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞ —Ç—Ä–µ–Ω–µ—Ä–∞
								coach.status = 'indebted_coach'
								with database() as connection: # –ø–∏—à—É –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∞—Å—å —Ñ—É–Ω–∫—Ü–∏—è –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –º–µ—Ç–æ–¥–µ Coach.set_coach()
									with connection.cursor() as db:
										db.execute(f"UPDATE users SET status='indebted_coach' WHERE id = {coach.user_id}")
									connection.commit()
								bot.send_message(coach.chat_id, f'–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.\n'
																f'–í–∞—à –¥–æ–ª–≥ –ø–æ –æ–ø–ª–∞—Ç–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {check_period[0]}‚ÇΩ.\n\n'
																f"–î–ª—è –æ–ø–ª–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ: <a href='https://google.com'>—Ç–µ—Å—Ç–æ–≤–∞—è —Å—Å—ã–ª–∫–∞</a>.", parse_mode='HTML',
												 reply_markup=ReplyKeyboardRemove())
							settings = coach.extra()
							if settings and not forbidden_status(coach):
								settings = settings['bot_checking_funcs']
								# coach_tasks_reminding - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç—Ä–µ–Ω–µ—Ä—É –æ –µ–≥–æ —Ç–µ–∫—É—â–∏—Ö –∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
								if settings['coach_tasks_reminding']:
									if coach.tasks:
										out = coach.tasks_description()
										bot.send_message(coach.chat_id, f'‚ùóÔ∏è –¢–µ–∫—É—â–∏–µ _–Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏_:\n\n{out}.\n\n–í–æ–≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ö –≤ –º–µ–Ω—é *"–û–±—â–µ–µ"* üëâ *"–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏"* –∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ!\n'
														 f'–≠—Ç–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –≤–∞—à —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.')
								if coach.tasks:
									late_tasks = [task for task in coach.tasks if not task.check_period()]
									if late_tasks:
										for task in late_tasks:
											task.delete(coach)
											if settings['coach_tasks_reminding']:
												bot.send_message(coach.chat_id, f'–û—á–µ–Ω—å –ø–ª–æ—Ö–æ! –ó–∞–¥–∞—á–∞ –æ—Ç *{task.start_date()}* _("{task.description}")_ –±—ã–ª–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –∏ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.')
								with database() as connection:
									with connection.cursor() as db:
										db.execute(f"SELECT chat_id FROM users WHERE current_coach_id = {coach.id}")
										data = db.fetchall()
								if data:
									for u in data:
										user = User(u['chat_id'])
										user_settings = user.notifications()
										# user_tariff_ended_reminding - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏—è —Ç–∞—Ä–∏—Ñ–∞
										if user.subscription_plan['period'] and user.subscription_plan['period'] < date.today() and not user.subscription_plan['tariff_id'] is None:
											user.subscription_plan['sessions_count'] = {i: None for i in user.subscription_plan['sessions_count']}
											user.subscription_plan['tariff_id'] = None
											user.subscription_plan['period'] = None
											user.subscription_plan['start_timestamp'] = None
											user.set_user(subscription_plan=True)
											if settings['user_tariff_ended_reminding']:
												try:
													bot.send_message(user.chat_id, 'ü•≤ –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –∏—Å—Ç–µ–∫ —Å–µ–≥–æ–¥–Ω—è.\n\n'
																		  'üôÇ –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–ª–∏—Ç—å –µ–≥–æ.', reply_markup=keyboard(user))
												except:
													pass

										# user_today_session_reminding - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º –æ —Ç–æ–º, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —Å–æ—Å—Ç–æ–∏—Ç—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (–µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏)
										if user_settings and user_settings['reminding_today_session']:
											if not user_settings['reminded_today_session'] or user_settings['reminded_today_session'] != date.today():
												with database() as connection:
													with connection.cursor() as db:
														db.execute(f"SELECT time FROM schedules WHERE coachs_id = {coach.id} AND users_id = {user.id} AND date = CURDATE()")
														data = db.fetchone()
														if data:
															today = date.today()
															time_checking = datetime(today.year, today.month, today.day, int(str(data['time'])[:2].replace(':', ''))) - datetime.now() > timedelta(hours=2)
															if time_checking:
																hour = data['time']
																bot.send_message(user.chat_id, f'üòÄ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ*!\n–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º *{coach.fullname}* –≤ _{str(hour)[:-3]}_.\n\n'
																							   f'–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é *"–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"* üëâ *"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"*.', reply_markup=keyboard(user))
																user_settings['reminded_today_session'] = date.today().isoformat()
																user.notifications(set=True, updated_notifications=user_settings)


										# –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –ø–æ –±—É–¥–Ω—è–º) –∫–ª–∏–µ–Ω—Ç–∞–º –æ —Ç–æ–º, —á—Ç–æ —É –Ω–∏—Ö –µ—Å—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –Ω–æ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞)
										if user_settings and user_settings['reminding_left_sessions']:
											if not datetime.today().isoweekday() in [6, 7]:
												if user.sessions_left() and not user.upcoming_sessions():
													bot.send_message(user.chat_id, 'üòÄ *–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ*!\n' +\
																			  '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–∏—Ö —á–µ—Ä–µ–∑ –º–µ–Ω—é *–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É*!\n\n' +\
																			  f'‚òëÔ∏è –°–µ–π—á–∞—Å —É –≤–∞—Å –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: *{training_types(user)}*\n' +\
																			  (f'‚ùóÔ∏è –ò—Ö —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: *–¥–æ {user.subscription_plan["period"]}*.\n' if not user.subscription_plan["period"] is None else '') + '\n' +\
																				   f'–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é *"–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"* üëâ *"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"*.', reply_markup=keyboard(user))

										# user_current_tasks_reminding - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –∏–º–µ—é—â–∏–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏, –æ, –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–¥–∞—á–∞—Ö
										# + –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
										tasks = user.tasks
										if tasks:
											for task in tasks:
												if not task.check_period():
													task.delete(user)
													if user_settings['reminding_current_tasks'] and not user.subscription_plan['tariff_id'] is None:
														bot.send_message(user.chat_id,
																		 f'–ó–∞–¥–∞—á–∞ –æ—Ç _{task.start_date()}_ (—Ç–∏–ø –∑–∞–¥–∞—á–∏: _"{task.type}"_, –æ–ø–∏—Å–∞–Ω–∏–µ: _{task.description}_) –±—ã–ª–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞!\n\n'
																		 f'–û–Ω–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n\n'
																		 '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± —ç—Ç–æ–º –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –º–µ–Ω—é *"–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"* üëâ *"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"*.',
																		 reply_markup=keyboard(user))
											if tasks:
												if user_settings['reminding_current_tasks'] and not user.subscription_plan['tariff_id'] is None:
													bot.send_message(user.chat_id,
																	 '–£ –≤–∞—Å –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏!\n'
																	 '–í–æ–≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä—è–π—Ç–µ –∏—Ö –∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –≤ –º–µ–Ω—é *"–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"* üëâ *"–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏"*.\n\n'
																	 '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± —ç—Ç–æ–º –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ –º–µ–Ω—é *"–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"* üëâ *"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"*.',
																	 reply_markup=keyboard(user))

										# user_online_training_reports_reminding - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º –æ–± –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º
										if settings['user_online_training_reports_reminding']:
											tasks = user.tasks
											if tasks:
												flag = False
												for task in tasks:
													days_check = abs((datetime.today() - (task.date + task.period)).days)
													if task.type_number == 1 and days_check < 3:
														if user.check_period():
															user_perms = user.permissions
															if 'individual_trainings' in user_perms:
																flag = True
												if flag is True:
													bot.send_message(user.chat_id,
																	 '‚ùï –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ª–∏ –≤—Å–µ –Ω—É–∂–Ω—ã–µ *–≤–∏–¥–µ–æ-–æ—Ç—á–µ—Ç—ã* –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º –∑–∞–¥–∞–Ω–∏—è–º –æ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é *"–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"* üëâ *"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è"*.', reply_markup=keyboard(user))



			# today_coach_schedule - —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç—Ä–µ–Ω–µ—Ä–∞ —Å —É—Ç—Ä–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
			if datetime.now().hour == 7:
				with database() as connection:
					with connection.cursor() as db:
						db.execute(f"SELECT id FROM coachs")
						coachs_list = db.fetchall()
				if coachs_list:
					for c in coachs_list:
						try:
							coach = Coach(coach_id=c['id'])
							settings = coach.extra()
						except:
							coach = None
							settings = None
					if coach and not forbidden_status(coach) and settings:
						settings = settings['bot_checking_funcs']
					if settings['today_coach_schedule']:
						today_schedule = ScheduleDay(coach, date.today()).get_schedule()
						if today_schedule:
							types = {'personal': '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ', 'split': '—Å–ø–ª–∏—Ç', 'group': '–≥—Ä—É–ø–ø–∞',
									 'personal_online': '–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ –æ–Ω–ª–∞–π–Ω', 'free': '–±–µ—Å–ø–ª–∞—Ç–Ω–æ (–ø—Ä–æ–±–Ω–æ)'}
							lst = []
							for hour in today_schedule:
								clients = [i['user'].fullname + (f' (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: _"{i["comment"]}"_)' if i['comment'] else '') + f' - _{types[hour.session_type]}_' for i in hour.clients]
								lst.append(f"- *{hour.time}:00* : " + ', '.join(clients))
							bot.send_message(coach.chat_id, 'üòÉ *–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º! –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è*.\n\n' + '\n'.join(sorted(set(lst), key=lambda string: int(string[3:5]) if not ':' in string[3:5] else int(string[3:4]))))
						else:
							bot.send_message(coach.chat_id, 'üòá *–î–æ–±—Ä–æ–≥–æ —É—Ç—Ä–∞!* –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—É—Å—Ç–æ!',
											 parse_mode='Markdown')


			# –æ—á–∏—Å—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–æ—á—å—é, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è–ª—Å—è —á–∞—Ç
			if datetime.now().hour == 4:
				with database() as connection:
					with connection.cursor() as db:
						db.execute('SELECT * FROM temp_messages')
						messages = db.fetchall()
						for m in messages:
							try:
								bot.delete_message(m['chat_id'], m['message_id'])
							except:
								continue
						db.execute('TRUNCATE TABLE temp_messages')
						# statuses from handlers.other.config
						checking_statuses = ', '.join(["'" + i + "'" for i in statuses])
						db.execute(f"UPDATE users SET status = 'registered' WHERE status NOT IN ({checking_statuses})")
					connection.commit()
				if os.path.exists('data/temp_data/temp_dict.pickle'):
					os.remove('data/temp_data/temp_dict.pickle')
				if os.path.exists('data/temp_data/general_dict.pickle'):
					os.remove('data/temp_data/general_dict.pickle')
		except:
			bot.send_message(developer_id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: checking.py, {datetime.now().isoformat()}.\n'
									   f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª–æ–≥-—Ñ–∞–π–ª.')
			Error().log()
		finally:
			sleep(3600)


# –ø—Ä–æ—Ü–µ—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
def checking_every_minute(bot):
	while True:
		try:
			with database() as connection:
				with connection.cursor() as db:
					db.execute("SELECT * FROM blacklist")
					blocked_list = db.fetchall()
					if blocked_list:
						blocked_list = [f"'{i['users_chat_id']}'" for i in filter(lambda x: x['blocked_datetime'] + timedelta(days=1) < datetime.now(), blocked_list)]
						if blocked_list:
							db.execute(f"DELETE FROM blacklist WHERE users_chat_id IN ({', '.join(blocked_list)})")
							connection.commit()
							for chat_id in blocked_list:
								chat_id = int(chat_id[1:-1])
								bot.send_message(chat_id, '–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n\n'
														  '–í–µ–¥–∏—Ç–µ —Å–µ–±—è —Ö–æ—Ä–æ—à–æ!')
								sleep(1)
					forbidden_statuses = statuses
					users_with_forbidden_statuses = []
					db.execute(f"SELECT chat_id, status FROM users WHERE status != 'registered'")
					users_to_list = db.fetchall()
					if users_to_list:
						users_to_list = [(i['chat_id'], i['status']) for i in users_to_list]
						for chat_id, status in users_to_list:
							if any([status.startswith(forbidden_status) for forbidden_status in forbidden_statuses]):
								users_with_forbidden_statuses.append(chat_id)
					if users_with_forbidden_statuses:
						users_with_forbidden_statuses = [User(i) for i in users_with_forbidden_statuses]
						for u in users_with_forbidden_statuses:
							if u.status in ['individual_training', 'self_training']:
								user_training_self = sorted([i for i in u.training_self() if not i["training_started_at"] is None], key=lambda x: x['training_started_at'], reverse=True)[0]
								training_plan = TrainingSelfPlan(u, user_training_self['training_plans_id'])
								if datetime.now() - training_plan.training_started_at > timedelta(minutes=training_plan.duration):
									u.status = 'registered'
									u.set_user()
									del_msgs('training_plan', u)
									del_msgs('training_self', u)
									del_msgs('my_trainings', u)
									del_msgs('individual_training_exercise_info', u)
									bot.send_message(u.chat_id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å {"–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º" if training_plan.type == "individual" else "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–º"} –∑–∞–¥–∞–Ω–∏–µ–º.\n'
																f'–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ã–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–æ _{current_time(training_plan.training_started_at + timedelta(minutes=training_plan.duration))}_.\n\n'
																f'–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω–∞.')
									tasks = u.tasks
									for task in tasks:
										if task.additional_info[0] == training_plan.id:
											task.delete()
							if any([u.status.startswith('sending_individual_plan_report'), u.status.startswith('sending_self_training_video_report')]):
								if datetime.now() - u.last_callback > timedelta(hours=2):
									user_training_self = \
									sorted([i for i in u.training_self() if not i["training_started_at"] is None],
										   key=lambda x: x['training_started_at'], reverse=True)[0]
									training_plan = TrainingSelfPlan(u, user_training_self['training_plans_id'])
									u.status = 'registered'
									u.set_user()
									del_msgs('training_self', u)
									del_msgs('training_plan', u)
									del_msgs('individual_training_exercise_info', u)
									del_msgs('my_trainings', u)
									bot.send_message(u.chat_id, '–í—ã —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –ø—ã—Ç–∞–ª–∏—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.\n'
																'–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.')
									tasks = u.tasks
									for task in tasks:
										if task.additional_info[0] == training_plan.id:
											task.delete()
					db.execute(f"SELECT chat_id FROM users WHERE is_coach = {True}")
					coachs_list = db.fetchall()
					db.execute(f"SELECT chat_id FROM users WHERE is_coach = {False}")
					users_list = db.fetchall()
			if coachs_list:
				for c in coachs_list:
					try:
						coach = Coach(c['chat_id'])
						settings = coach.extra()
					except:
						coach = None
						settings = None

					if coach and not forbidden_status(coach) and settings:
						settings = settings['bot_checking_funcs']# –µ—Å–ª–∏ –±—É–¥—É—Ç –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
						data = coach.clients()
						if data:
							for user in data:
								user_reminding = user.notifications()
								if not user_reminding is None and user_reminding['reminding_before_sessions']:
									if user.current_coach_id:
										today_schedule = ScheduleDay(coach, date.today()).get_schedule()
									# –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π (–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞)
									# 0 - –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å, 1/2/3 - –∑–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å
									# reminding_before_sessions
									if today_schedule:
										for hour in today_schedule:
											if hour.clients:
												if user.id in [i['user'].id for i in hour.clients]:
													if not user_reminding['reminded_before_session'] or user_reminding['reminded_before_session'] != date.today():
														if hour.time - datetime.today().hour == user_reminding['reminding_before_sessions']:
																bot.send_message(user.chat_id, f'üòÄ –ù–∞–ø–æ–º–∏–Ω–∞–µ–º!\n\n'
																								f'–°–µ–≥–æ–¥–Ω—è —É –≤–∞—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ *{hour.time}:00*.\n\n'
																							   f'–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –≤ –º–µ–Ω—é *"–ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"* üëâ *"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"*.', reply_markup=keyboard(user))
																user_reminding['reminded_before_session'] = date.today().isoformat()
																user.notifications(set=True, updated_notifications=user_reminding)
		except:
			bot.send_message(developer_id, f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: checking.py, {datetime.now().isoformat()}.\n'
									   f'–î–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ª–æ–≥-—Ñ–∞–π–ª.')
			Error().log()
		finally:
			sleep(60)

spams = {}

def spams(bot):
	### anti-spam func for messages from user
	@bot.message_handler(func=lambda message: blacklist_checking(message))
	def is_spam(msg):
		anti_spam(msg)


